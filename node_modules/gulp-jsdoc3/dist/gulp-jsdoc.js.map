{"version":3,"sources":["gulp-jsdoc.js"],"names":["jsdoc","os","require","type","debug","config","done","files","jsdocConfig","arguments","length","undefined","JSON","stringify","file","callback","push","path","on","resolve","reject","jsdocConfigClone","parse","source","include","concat","errMsg","log","colors","red","beep","Error","tmpobj","fileSync","join","writeFile","name","err","spawn","cmd","inkdocstrap","dirname","args","opts","template","templates","default","layoutFile","child","process","execPath","cwd","stdout","setEncoding","stderr","data","code","error","asCallback"],"mappings":"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","file":"gulp-jsdoc.js","sourcesContent":["import map from 'map-stream';\nimport tmp from 'tmp';\nimport fs from 'fs';\nimport path from 'path';\nimport gutil from 'gulp-util';\nimport Promise from 'bluebird';\nlet os = require('os').type();\n\nlet debug = require('debug')('gulp-jsdoc3');\n\n/**\n * @callback gulpDoneCallback\n */\n\n/**\n * A wrapper around jsdoc cli.\n *\n * This function collects all filenames. Then runs:\n * ```jsdoc -c config -t node_modules/ink-docstrap/template gulpFile1 gulpFile2```\n * @example\n * gulp.src(['README.md', 'src/*.js']), {read: false}).pipe(\n *     jsdoc(options, cb)\n * );\n *\n * @param {Object} [config=require('./jsdocConfig.json')]\n * @param {gulpDoneCallback} done\n * @returns {*|SignalBinding}\n */\nexport function jsdoc(config, done) {\n    let files = [];\n    let jsdocConfig;\n\n    // User just passed callback\n    if (arguments.length === 1 && typeof config === 'function') {\n        done = config;\n        config = undefined;\n    }\n\n    // Prevent some errors\n    if (typeof done !== 'function') {\n        done = function () {\n        };\n    }\n\n    jsdocConfig = config || require('./jsdocConfig.json');\n\n    debug('Config:\\n' + JSON.stringify(jsdocConfig, undefined, 2));\n\n    return map(function (file, callback) {\n        files.push(file.path);\n        callback(null, file);\n    }).on('end', function () {\n        // We use a promise to prevent multiple dones (normal cause error then close)\n        new Promise(function (resolve, reject) {\n            // We clone the config file so as to not affect the original\n            let jsdocConfigClone = JSON.parse(JSON.stringify(jsdocConfig));\n            // If the user has specified a source.include key, we append the\n            // gulp.src files to it.\n            if (jsdocConfigClone.source && jsdocConfigClone.source.include) {\n                jsdocConfigClone.source.include =\n                    jsdocConfigClone.source.include.concat(files);\n            } else {\n                jsdocConfigClone = Object.assign(jsdocConfigClone,\n                    { source: { include: files } });\n            }\n\n            if (jsdocConfigClone.source.include.length === 0) {\n                const errMsg = 'JSDoc Error: no files found to process';\n                gutil.log(gutil.colors.red(errMsg));\n                gutil.beep();\n                reject(new Error(errMsg));\n                return;\n            }\n\n            const tmpobj = tmp.fileSync();\n            debug('Documenting files: ' + jsdocConfigClone.source.include.join(' '));\n            fs.writeFile(tmpobj.name, JSON.stringify(jsdocConfigClone), 'utf8', function (err) {\n                // We couldn't write the temp file\n                /* istanbul ignore next */\n                if (err) {\n                    reject(err);\n                    return;\n                }\n\n                const spawn = require('child_process').spawn,\n                    cmd = require.resolve('jsdoc/jsdoc.js'), // Needed to handle npm3 - find the binary anywhere\n                    inkdocstrap = path.dirname(require.resolve('ink-docstrap'));\n\n                let args = ['-c', tmpobj.name];\n\n                // Config + ink-docstrap if user did not specify their own layout or template\n                if (!(jsdocConfigClone.opts &&\n                    jsdocConfigClone.opts.template) && !(jsdocConfigClone.templates &&\n                    jsdocConfigClone.templates.default &&\n                    jsdocConfigClone.templates.default.layoutFile)) {\n                    args = args.concat(['-t', inkdocstrap]);\n                }\n\n                debug(cmd + ' ' + args.join(' '));\n\n                const child = os === 'Windows_NT'\n                    ? spawn(process.execPath, [cmd].concat(args), {cwd: process.cwd()})\n                    : spawn(cmd, args, {cwd: process.cwd()}); // unix\n                child.stdout.setEncoding('utf8');\n                child.stderr.setEncoding('utf8');\n                /* istanbul ignore next */\n                child.stdout.on('data', function (data) {\n                    gutil.log(data);\n                });\n                /* istanbul ignore next */\n                child.stderr.on('data', function (data) {\n                    gutil.log(gutil.colors.red(data));\n                    gutil.beep();\n                });\n                child.on('close', function (code) {\n                    if (code === 0) {\n                        gutil.log('Documented ' + jsdocConfigClone.source.include.length + ' files!');\n                        resolve();\n                    } else {\n                        gutil.log(gutil.colors.red('JSDoc returned with error code: ' + code));\n                        gutil.beep();\n                        reject(new Error('JSDoc closed with error code: ' + code));\n                    }\n                });\n                child.on('error', function (error) {\n                    gutil.log(gutil.colors.red('JSDoc Error: ' + error));\n                    gutil.beep();\n                    reject(new Error(error));\n                });\n            });\n        }).asCallback(done);\n    });\n}\n"]}